def is_safe(board, row, col, n):
    # Check if it's safe to place a queen at (row, col)
    
    # Check the left side of the current row
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, col, n):
    if col >= n:
        return True

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            print_board(board)
            
            if solve_n_queens(board, col + 1, n):
                return True

            board[i][col] = 0  # Backtrack if a solution is not found

    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))
    print("\n")

def n_queens_solver(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    
    if solve_n_queens(board, 0, n):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution found")

n = 4  # Change this value to the desired board size (e.g., n = 4)
n_queens_solver(n)








def is_safe(board, row, col, n):
    # Check if it's safe to place a queen at (row, col)
    
    # Check the left side of the current row
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, col, n):
    if col >= n:
        return True

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            print_board(board)
            
            if solve_n_queens(board, col + 1, n):
                return True

            board[i][col] = 0  # Backtrack if a solution is not found

    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))
    print("\n")

def n_queens_solver(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    
    if solve_n_queens(board, 0, n):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution found")

n = 6  # Change this value to the desired board size (e.g., n = 4)
n_queens_solver(n)